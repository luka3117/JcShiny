wakayama::city.code
library(wakayama)
shiny::runApp('Desktop/z/aaa')
source('~/.active-rstudio-document', echo=TRUE)
runApp()
system("open .")
runApp('qqq')
runApp()
runApp('Desktop/z/aaa')
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
library(shiny)
fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# sliderInput("aaa",
#             "Number of bins:",
#             min = 1,
#             max = 50,
#             value = 30),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output <- renderPlot({
# generate bins based on input from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# sliderInput("aaa",
#             "Number of bins:",
#             min = 1,
#             max = 50,
#             value = 30),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output <- renderPlot({
# generate bins based on input from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('bb')
runApp('bb')
runApp('bb')
runApp('bb')
runApp('Desktop/z/aaa')
library(shiny)
runGitHub(repo = "JcShiny", username = "luka3117")
runApp('Dropbox/dplyr-tutorial-master/JcShiny')
?textInput
?textInput
runApp('Dropbox/dplyr-tutorial-master/JcShiny')
runApp('Dropbox/dplyr-tutorial-master/JcShiny')
runApp('Dropbox/dplyr-tutorial-master/JcShiny')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='luka3117',
token='19FBD8328AF499F284E66170F5EB6BE6',
secret='<SECRET>')
Show secret   Copy to clipboard
rsconnect::setAccountInfo(name='luka3117',
token='19FBD8328AF499F284E66170F5EB6BE6',
secret='<SECRET>')
Show secret   Copy to clipboard
rsconnect::setAccountInfo(name='luka3117',
token='19FBD8328AF499F284E66170F5EB6BE6',
secret='QAcRnLIM6zAmgIxc5aHLbkdCB74V4AjaVsqNiUJa')
shiny::runApp('shiny-examples-master/005-sliders')
shiny::runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
runApp('jc 066-upload-file')
shiny::runApp('jc 066-upload-file')
system("open .")
source('~/.active-rstudio-document', echo=TRUE)
runApp('jc 066-upload-file')
runApp('aaa')
runApp('jc 066-upload-file')
?rederTable
?renderTable
runApp('jc 066-upload-file')
